AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  Batch(ec2) Step Function Template

##########################################################################
#   Parameters
#   https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/parameters-section-structure.html
##########################################################################
Parameters:
  DefaultName:
    Type: String
    Default: sample
  PythonVersion:
    Type: String
    Default: python3.8
  StageType:
    Type: String
    Default: dev
  BatchRole:
    Type: String
    Default: batch-sample-role

##########################################################################
#   Globals
#   https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-specification-template-anatomy-globals.html
##########################################################################
Globals:
  Function:
    Runtime: !Sub ${PythonVersion}
    MemorySize: 3072
    Timeout: 900
    Layers:
      # - !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:layer:layer이름:버전(숫자)
      - !Ref SampleSharedLayer
    Tags:
      ServiceType: !Sub ${ServiceType}
    AutoPublishAlias: !Ref StageType
    VpcConfig:
      SecurityGroupIds:
        - sg-00000000000000000
      SubnetIds:
        - subnet-00000000000000000
        - subnet-11111111111111111

Resources:
  ##########################################################################
  #   AWS::Serverless::Function
  #   https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-resource-function.html
  ##########################################################################
  Lambda01Task:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${DefaultName}-Lambda01Task
      Description: !Sub ${DefaultName}-Lambda01Task
      Tags:
        Name: !Sub ${DefaultName}-Lambda01Task
      CodeUri: template/step_functions/EC2/functions/task_01_lambda
      Handler: app.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
  Lambda03Task:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${DefaultName}-Lambda03Task
      Description: !Sub ${DefaultName}-Lambda03Task
      Tags:
        Name: !Sub ${DefaultName}-Lambda03Task
      CodeUri: template/step_functions/EC2/functions/task_03_lambda
      Handler: app.lambda_handler
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/${LambdaRole}
  ##########################################################################
  #   AWS::Batch::ComputeEnvironment
  #   https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-resource-batch-computeenvironment.html
  #   ecsInstanceRole >> https://docs.aws.amazon.com/ko_kr/batch/latest/userguide/instance_IAM_role.html
  ##########################################################################
  BatchComputeEnvironment:
    Type: AWS::Batch::ComputeEnvironment
    Properties:
      ComputeEnvironmentName: !Sub ${StageType}-batch-${DefaultName}-CompEnv
      Type: MANAGED #관리형
      ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/${BatchRole}
      State: ENABLED
      ComputeResources:
        DesiredvCpus: 8
        InstanceRole: !Sub arn:aws:iam::${AWS::AccountId}:instance-profile/ecsInstanceRole
        InstanceTypes:
          - c5
          - m5
        MaxvCpus: 16
        MinvCpus: 4
        SecurityGroupIds:
          - sg-00000000000000000
        Subnets:
          - subnet-00000000000000000
          - subnet-11111111111111111
        Type: EC2 # FARGATE or EC2   / FARGATE 이용시 MaxvCpus만 설정하면 됨
  ##########################################################################
  #   AWS::Batch::JobDefinition
  #   https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-resource-batch-jobdefinition.html
  ##########################################################################
  BatchJobDefinition:
    Type: AWS::Batch::JobDefinition
    Properties:
      JobDefinitionName: !Sub ${StageType}-batch-${DefaultName}-JobDef
      Type: container
      PlatformCapabilities:
        - EC2
      RetryStrategy:
        Attempts: 1
      Timeout:
        AttemptDurationSeconds: 7200
      ContainerProperties:
        ResourceRequirements:
          - Type : VCPU
            Value : '8' # MAX 4vCPU
          - Type : MEMORY
            Value : '8192' # 8GB # 16384(16GB) # MAX 30,720(30GB)
        ExecutionRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${BatchRole} #Fargate 이용시 사용될 역할
        Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/image-name-ecr:${StageType} # 이미지 파일 넣기
        JobRoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/${BatchRole} # job 역할
        User: root
        Privileged: false #컨테이너 호스트 권한 > FARGATE는 false
        NetworkConfiguration:
          AssignPublicIp: ENABLED
        ReadonlyRootFilesystem: false #읽기 전용 엑세스 권한
        Command: # 이미지에서 수행할 커맨드
          - python3
          - -m
          - app
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref BatchLogGroup
  ##########################################################################
  #   AWS::Logs::LogGroup
  #   https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-resource-logs-loggroup.html
  ##########################################################################
  BatchLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/batch/${StageType}-batchlog # 사용자 정의 로그 그룹
      RetentionInDays: 30 # 로그 그룹 유지 기간
  ##########################################################################
  #   AWS::Batch::JobQueue
  #   https://docs.aws.amazon.com/ko_kr/AWSCloudFormation/latest/UserGuide/aws-resource-batch-jobqueue.html
  ##########################################################################
  BatchJobQueue:
    Type: AWS::Batch::JobQueue
    DependsOn: # DependsOn 중요!! 컴퓨팅 환경이 만들어진뒤에 생성되어야함
      - BatchComputeEnvironment
      - BatchJobDefinition
    Properties:
      ComputeEnvironmentOrder:
        - Order: 1 # 해당 컴퓨팅 환경의 우선순위 설정  (작은 숫자 우선 실행)
          ComputeEnvironment: !Ref BatchComputeEnvironment
      JobQueueName: !Sub ${StageType}-batch-${DefaultName}-Queue
      Priority: 1 # 해당 대기열의 우선순위 설정  (큰 숫자 우선 실행)
      State: ENABLED
  ##########################################################################
  #   AWS::Serverless::StateMachine
  #   https://docs.aws.amazon.com/ko_kr/serverless-application-model/latest/developerguide/sam-resource-statemachine.html
  ##########################################################################
  SampleStateMachine:
    Type: AWS::Serverless::StateMachine
    Properties:
      Type: STANDARD
      Name: !Sub ${StageType}-${DefaultName}-StateMachine
      Tags:
        Name: !Sub ${StageType}-${DefaultName}-StateMachine
        ServicType: !Sub ${ServiceType}
      Role: !ImportValue sample-iam:StepFunctionsRoleArn # iam/template.yml 참고
      Logging:
        Destinations:
          - CloudWatchLogsLogGroup:
              LogGroupArn: !GetAtt SampleStateMachineLogGroup.Arn
        IncludeExecutionData: True
        Level: ALL #ERROR
      DefinitionUri: template/step_functions/EC2/statemachine/step_function.asl.json
      DefinitionSubstitutions:
        Lambda01TaskArn: !GetAtt Lambda01Task.Arn
        JobDefinition: !Sub ${BatchJobDefinition}
        JobQueue: !Sub ${BatchJobQueue}
        Lambda03TaskArn: !GetAtt Lambda03Task.Arn
  # StepFunction 로그
  SampleStateMachineLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/states/${StageType}-${DefaultName}-StateMachine
      RetentionInDays: 30
